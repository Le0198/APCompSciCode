
-----------------------------------
1

#include <iostream>

using namespace std;




int sumDouble(int a, int b) {
  
	int sum = a + b;
  
	if (a == b) {

		sum = sum*2;

	} 
  
	return sum;

}


int main() {
 
	cout<<sumDouble(1,2);
    

}
------------------------------------
2

bool sleepIn(bool weekday, bool vacation) {

  if(!weekday || vacation){

    return true;

  } else {

  return false;

  }

}



int main() {

    std::cout<<boolalpha;

    std::cout<<sleepIn(false,false);


}

-------------------------------------
3

#include <algorithm>

#include <string>

#include <iostream>

using namespace std;

string toUpper(string s){

    transform(s.begin(), s.end(), s.begin(),::toupper);

    return s;

}


int main(){
  
    cout << toUpper("leo");

}
--------------------------------------
4

#include <algorithm>


#include <string>


#include <iostream>


using namespace std;


string toUpper(string s){


    transform(s.begin(), s.end(), s.begin(),::toupper);


    return s;


}


string endUp(string str) {
  string result = "";

  if(str.size()<3){

    result = toUpper(str);

  } else {

    result = str.substr(0,str.size()-3)+toUpper(str.substr(str.size()-3));

  }

  return result;

}


int main(){

    cout << endUp("hello");

}
---------------------------------------
5

#include <iostream>

using namespace std;


string stringTimes(string str, int n) {

  string nstr = "";

  int i = 0;

  while(i < n){

    nstr += str;

    i++;
  }

  return(nstr);

}


int main(){

    cout<<stringTimes("Hello",3);

}
--------------------------------------
6

#include <iostream>

#include <string>



using namespace std;


string stringBits(string str) {

  string everyOther = "";

  int i = 0;

  while(i < str.size()){

    everyOther += str.at(i);

    i+=2;

  }
  
return(everyOther);

}


int main(){

    cout<<stringBits("Leonardo Lopez");

}
-------------------------------------
7

#include <iostream>

#include <vector>

using namespace std;

int countEvens(vector<int> nums) {

  int count = 0;

  for(int i = 0; i < nums.size(); i++){

    if (nums[i]%2 == 0){

      count++;
    }

  }

  return count;

}


int main(){

    cout<<countEvens({8,10,16,17,3,4});
}
---------------------------------------
8

#include <iostream>

#include <vector>
using namespace std;

int sum67(vector<int> nums) {

  int sum = 0;

  for(int i = 0; i < nums.size(); i++){

    if(nums[i] == 6){

      while(nums[i] != 7){

        i += 1;

      }

    }else{

      sum += nums[i];

    }

  }

  return sum;

}


int main(){

    cout<<sum67({1, 1, 6, 7, 2});

}
--------------------------------------
9

#include <iostream>

#include <vector>
using namespace std;

bool haveThree(vector<int> nums) {

  int count = 0;

  for(int i =0; i < nums.size(); i++){

    if(nums[i] == 3){

      count++;

      if(i+1 < nums.size() && nums[i+1] == 3){

        return false;

      }

    }

  }

  if(count == 3){

    return true;

  } else {

    return false;

  }

}


int main(){

    cout<<boolalpha;

    cout<<haveThree({3, 1, 3, 1, 3});

}
--------------------------------------
10

#include <iostream>

#include <vector>

using namespace std;


vector<int> evenOdd(vector<int> nums) {

  vector<int> order;
  int i = 0;

  for(int num : nums){

    if(num%2 == 0){

      order.push_back(num);

      i++;

    }

  }

  for(int num : nums){

    if(num%2 == 1){

     order.push_back(num);

      i++;

    }

  }

  return order;

}



int main(){

    vector<int> order;

    order = evenOdd({3, 4, 3, 4, 3});

    for(int i = 0; i < order.size(); i++){

        cout<<order[i]<<", ";

    }

}
---------------------------------------
11

#include <iostream>

using namespace std;


int factorial(int n) {

  if(n < 1){

    return(1);

  }

  return(n*factorial(n-1));

}



int main(){

    cout<<factorial(5);

}
----------------------------------------
12

#include <iostream>

using namespace std;


int countX(string str) {

    if (str.length() == 0) return 0;

    if (str.at(0) == 'x') return 1 + countX(str.substr(1));

    return countX(str.substr(1));

}



int main(){

    cout<<countX("xyxxyxyxxx");

}
---------------------------------------
13

#include <iostream>

using namespace std;


bool makeBricks(int small, int big, int goal) {
  return((goal - big*5) <= small && goal % 5 <= small);

}


int main(){

    cout<<boolalpha;

    cout<<makeBricks(3, 1, 8);

}
--------------------------------------
14

#include <iostream>

#include <vector>

#include <string>

using namespace std;


int matchUp(vector<string> a, vector<string> b) {

  int count = 0;
  for(int i = 0; i < a.size(); i++){

    if(a[i].length() > 0 && b[i].length() > 0){

      if(b[i].at(0) == a[i].at(0)){

        count++;

      }

    }

  }

  return count;

}


int main(){

    cout<<matchUp({"aa", "bb", "cc"}, {"aaa", "b", "bb"});

}
-------------------------------------
15

#include <iostream>

#include <string>

#include <algorithm>

using namespace std;


string toUpper(string s){

    transform(s.begin(), s.end(), s.begin(),::toupper);

    return s;

}


string toLower(string s){

    transform(s.begin(), s.end(), s.begin(),::tolower);

    return s;

}


string withoutString(string base, string remove) {

  while(base.find(remove) != string::npos){

    base = base.erase(base.find(remove),remove.length());

  }

  while(base.find(toLower(remove)) != string::npos){

    base = base.erase(base.find(remove), remove.length());

  }

  while(base.find(toUpper(remove)) != string::npos){

    base = base.erase(base.find(remove), remove.length());
  
  }

  return base;

}


int main(){

    cout<<withoutString("Hello there", "llo");

}